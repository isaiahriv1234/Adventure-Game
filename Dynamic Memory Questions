/* Pointers and Dynamic Memory Allocation:
Q1: In this program, why are pointers used to represent rooms and other objects (e.g., Room *currentRoom) instead of passing by value?

A1: Pointers are used to represent rooms and other objects so that modifications to the data can persist across function calls. By using pointers, we avoid unnecessary copying of data, ensuring that we work with the actual objects in memory. This is especially useful when modifying the state of complex objects like rooms and player inventories.

Q2: Explain how the memory for new rooms is allocated dynamically, and why this is necessary.

A2: The memory for new rooms is dynamically allocated using the new operator (e.g., Room* newRoom = new Room();). This is necessary because rooms are created during gameplay, and their number can vary. Dynamically allocated memory allows us to create rooms at runtime, and it is freed later using delete to avoid memory leaks.

2. Pointer Operations and Navigation:
Q3: When moving between rooms (using the commands "n", "e", "s", "w"), how does the program use pointers to update the currentRoom?
A3: The program updates the currentRoom pointer to point to the new room when a movement command is issued. For example, if the player moves north ("n"), the program checks if there is a valid room in the north direction (currentRoom->north()), and if it exists, the currentRoom pointer is updated to point to that new room. This allows the player to navigate the game world.
3. Managing Dynamic Arrays or Collections:
Q4: Why is the rooms map (std::map<int, Room*> rooms) used to store rooms, and how does it rely on pointers?

A4: The rooms map stores rooms using their unique roomID as the key and a pointer to the Room object as the value. Using pointers allows efficient memory usage, as each room is dynamically allocated when needed. The map provides easy lookup, and pointers ensure we can modify rooms without copying their data.

Q5: When you add a new room to the game (e.g., during the "a" command), what happens in terms of pointers and memory management?

A5: When a new room is added, the program allocates memory dynamically using new Room(), then stores a pointer to the newly created room in the rooms map with a unique roomID. This ensures that each room exists independently in memory, and we can modify them without affecting others. When the game ends, the rooms are deleted using delete to release memory.

4. Handling Objects with Pointers:
Q6: How are objects (such as items) managed in the game world using pointers?

A6: Objects are likely managed in a similar way to rooms, using pointers. When an object is created, it is dynamically allocated with new (e.g., Object* newObject = new Object();). These objects are then added to a container (like the player's inventory or a room's list of objects), and their pointers allow direct manipulation. This ensures objects can be created and destroyed during gameplay without causing memory issues.

Q7: Can you explain the relationship between objects and rooms, and how pointers are involved in object movement or interaction with rooms?

A7: Objects are typically contained within rooms, and rooms hold pointers to objects. When an object is moved between rooms, the program updates the pointer to that object in the corresponding room. For example, if a player picks up an object from a room, the object pointer is removed from the room's list, and the player’s inventory (also a list of object pointers) is updated to include the object. This allows efficient management of objects without copying their data.

5. Pointer Ownership and Cleanup:
Q8: How does the program ensure that memory is properly managed when dynamically allocated objects (like rooms or objects) are deleted?

A8: The program uses delete to free dynamically allocated memory once the room or object is no longer needed. For example, when the game ends or when a room is removed from the rooms map, delete currentRoom; is called to release the memory. This is crucial to prevent memory leaks by ensuring that every object allocated with new is eventually cleaned up.

Q9: What would happen if delete were not used when deleting rooms or objects? How would it affect the program?

A9: If delete were not used to free dynamically allocated memory, the program would have a memory leak. This means that memory allocated for rooms, objects, or other entities would not be returned to the system after they are no longer needed, causing the program to use more and more memory over time. This could eventually lead to the program running out of memory and crashing.

6. Pointer-Based Object Interactions:
Q10: How does the "jump" command rely on pointers to change the player's current room?

A10: The "jump" command uses a pointer to the desired room (retrieved from the rooms map using the room ID). Once the program confirms that the room ID exists, it updates the currentRoom pointer to point to the new room, effectively moving the player to that room. The program can then proceed with displaying the room’s description and any objects or mobiles present.

Q11: How are mobile objects (like NPCs) managed with pointers, and how does the pointer system allow mobiles to move and interact with rooms and other entities?

A11: Mobiles are likely managed with pointers (e.g., Mobile* currentMobile = new Mobile();). Each mobile has a pointer to its current room, and when it moves, the program updates that pointer to the new room. The pointer system allows efficient access and modification of the mobile's location and state. Mobiles can also pick up or drop items by using pointers to objects in the rooms they are in.

7. Pointer Relationships and Interactions:
Q12: How does the relationship between rooms and exits work in terms of pointers? Can you explain how an exit between rooms is established using pointers?
A12: Each room has pointers to neighboring rooms in the directions N, S, E, and W. When a new room is created and an exit is added, the program updates the respective pointer in both the current room and the new room to establish the connection. For example, if the player creates an exit to the north, the current room’s north pointer is updated to point to the new room, and the new room’s south pointer is updated to point back to the current room.
8. Pointer and Map Relationships:
Q13: How does the program use pointers in combination with a map (std::map<int, Room*>) to store rooms? What is the advantage of using a map in this context?
A13: The program uses the map to associate a unique integer ID (roomID) with a pointer to each room (Room*). The map provides fast access to rooms based on their roomID, making it easy to look up and update specific rooms as the game progresses. The use of pointers ensures that we can modify the rooms directly without copying data, and the map provides efficient lookups for rooms when processing commands.
9. Potential Pointer Issues:
Q14: What are some potential issues you could face when working with pointers in this game, and how can you prevent them?
A14: Some potential issues include memory leaks (failing to call delete), dangling pointers (accessing memory after it has been freed), and null pointer dereferencing (accessing a pointer that points to nullptr). To prevent these, the program should ensure that every dynamically allocated object is properly deleted when no longer needed, and pointers should be checked before use (e.g., if (pointer != nullptr)).
*/
